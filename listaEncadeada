#include <iostream>

using namespace std;

// // contNode, controle dos nos que estao presentes na LISTA
class contNode{
private:
	int valorArmazenado; //essa classe podera armazenar o que quisermos, nesse programa iremos armazenar um inteiro
	contNode* prox;		 //o no precisa mostrar a referencia, que sera o proximo no, essa sera a variavel que ira fazer isso	
public:
	// construtor do controle de nos - recebera apenas valores inteiros
	contNode(int valorArmazenado) {
		this->valorArmazenado = valorArmazenado;
		this->prox = NULL;  // Como nao sabermos quem é o proximo, quando criamos um nó o proximo é null
	}
	// metodo que obtém o valor e retorna valorArmazenado
	int obterValor(){
		return valorArmazenado;
	}
	// metodo que obtém o próximo Nó e retona o proximo
	contNode* obterProx(){
		return prox;
	}
	// metodo para setar o próximo No, o proximo ja sera null
	void setProx(contNode* p) {
		prox = p;
	}
};

// classe Lista - Onde teremos todos os dados da Lista
class Lista
{
protected:
	contNode* cabeca; // primeiro elemento - nó >> primeiro elemento da lista
	contNode* cauda; // último elemento -- calda >> ultimo elemento lista

public:
	//contrutor da lista - sem passar valor
	Lista()
	{
		// Quando crio a lista - então cabeca e cauda são NULL
		cabeca = NULL;
		cauda = NULL;
	}
	
	//contrutor da lista - com  passar valor
	// ou seja esse elemento sera o primeiro elemento , entao cabeca recebe o novo elemento
	// e calda sera igual a cabeça pois nao temos nenhum outro elemento na lista
	Lista(int valorArmazenado)
	{
		// se passar elemento, então cria novo No
		cabeca = new contNode(valorArmazenado);
		cauda = cabeca;
	}
	
	// destrutor
	virtual ~Lista() 
	{
		delete cabeca;
	}

	void mostrar() // mostra todos os elementos da lista
	{
		cout << "\nImprimindo todos os elementos...\n";
		contNode* c = cabeca;
		
		//checo se a lista esta vazia
		if(vazia())
			//Se estiver vazia mostro o valor que esta vazia
			cout << "A lista NAO possui elementos!!\n";
		else
		{	
			//se a lista possuir elementos, entao percorre a lista
			while(c) 
			{
				//e imprimo os valores da lista
				cout << c->obterValor() << endl;
				//para mostrar os outros elementos basto obter o proximo elemento atraves da referencia proxima
				c = c->obterProx();
			}
			cout << endl;
		}
	}
	
	// Metodo mostra um valor - ultimo inserido 
	void mostrarValor(contNode* c) 
	{
		//mostra um valor
		cout << "\nImprimindo  valor ...\n";
		//checa se esta vazia
		if(vazia())
			cout << "A lista NAO possui elementos!!\n";
		//Se nao estiver vazia mostra o ultimo inserido
		else
		{
			cout << c->obterValor() << endl;
			//cout << endl;
		}
	}
	 // Metodo para checar - verificar se a lista está vazia
	 // se a cabeça é nula entao null , ou seja a lista esta vazia
	bool vazia()
	{
		return (cabeca == NULL);
	}

	// insere no início (semelhante a push_front da list)
	//passamos o valor a ser inserido
	void inserir_inicio(int valorArmazenado)
	{
		//para inserir no lugar certo
		contNode* novo_no = new contNode(valorArmazenado);

		if(vazia())
		{
			cabeca = novo_no;
			cauda = novo_no;
		}
		else
		{
			novo_no->setProx(cabeca);
			cabeca = novo_no;
		}
	}

	// insere no final (semelhante a push_back da list)
	void inserir_final(int valorArmazenado)
	{
		contNode* novo_no = new contNode(valorArmazenado);

		if(vazia())
		{
			cabeca = novo_no;
			cauda = novo_no;
		}
		else
		{
			cauda->setProx(novo_no);
			cauda = novo_no;
		}
	}

	// retorna o tamanho da lista
	int tamanho()
	{
		if(vazia()) // se for vazia, entã retorna 0
			return 0;

		contNode* c = cabeca;
		int tam = 0;
		
		// percorre a lista
		do
		{
			c = c->obterProx();
			tam++;
		}
		while(c);
		
		return tam;
	}

	// verifica se um elemento existe na lista
	bool existe(int valorArmazenado)
	{
		contNode* c = cabeca;
		
		while(c)
		{
			if(c->obterValor() == valorArmazenado)
				return true;
			c = c->obterProx();
		}
		return false;
	}

	// remove da lista, remoção do final (semelhante a pop_back da list)
	void removerFinal()
	{
		if(!vazia())
		{
			// se houver só 1 elemento
			if(cabeca->obterProx() == NULL)
				cabeca = NULL;
			else if(cabeca->obterProx()->obterProx() == NULL) // 2 elementos
				cabeca->setProx(NULL);
			else // > 2 elementos
			{
				contNode* ant_ant = cabeca;
				contNode* ant = cabeca->obterProx();
				contNode* corrente = cabeca->obterProx()->obterProx();

				while(corrente)
				{
					contNode* aux = ant;
					ant = corrente;
					ant_ant = aux;
					corrente = corrente->obterProx();
				}
				delete ant_ant->obterProx(); // libera memória
				ant_ant->setProx(NULL); // seta o prox como NULL
				cauda = ant_ant; // atualiza a cauda
			}
		}
	}
	
	// remove da lista, remoção do inico da lista 
	void removerInicio()
	{
		if(!vazia())
		{
			// se houver só 1 elemento
			if(cabeca->obterProx() == NULL)
				cabeca = NULL;
			else if(cabeca->obterProx()->obterProx() == NULL) // 2 elementos
				cabeca->setProx(NULL);
			else // > 2 elementos
			{
				contNode* ant_ant = cabeca;
				contNode* ant = cabeca->obterProx();
				contNode* corrente = cabeca->obterProx()->obterProx();

				while(corrente)
				{
					contNode* aux = ant;
					ant = corrente;
					ant_ant = aux;
					corrente = corrente->obterProx();
				}
				delete ant_ant->obterProx(); // libera memória
				ant_ant->setProx(NULL); // seta o prox como NULL
				cauda = ant_ant; // atualiza a cauda
			}
		}
	}
	
};

class Pilha  : public Lista{
	    public:               
        Pilha();              
        ~Pilha();             
        int Topo();           
        void Pop(int valor);  
        int Push();           
        void PrintPilha();    
     
};
	
Pilha::Pilha(){
	Lista();
}

Pilha::~Pilha(){
	 cout << "Destrutor";
}

int Pilha::Topo(){
 mostrarValor(cauda);	
}

void Pilha::Pop(int valor){
	inserir_final(valor);	
}

int Pilha::Push(){
	removerFinal();	
}

void Pilha::PrintPilha(){
	mostrar();
	
}

class Fila  : public Lista{
	    public:               
        Fila();              
        ~Fila();             
        int PrimeiroFila();           
        void Pop(int valor);  
        int Push();           
        void PrintFila();    
           
};
	
Fila::Fila(){
	Lista();
}

Fila::~Fila(){
	 cout << "Destrutor";
}

int Fila::PrimeiroFila(){
 mostrarValor(cauda);	
}

void Fila::Pop(int valor){
	inserir_inicio(valor);	
}

int Fila::Push(){
	removerFinal();	
}

void Fila::PrintFila(){
	mostrar();
	
}


int main(int argc, char *argv[])
{
    //a principio teremos o teste da LISTA 
    //Instanciando o objeto lista
	Lista l;
	Pilha p;
	Fila f;
	
    cout << "****************TESTANDO LISTA \n";
	
	if(l.vazia())
		cout << "Lista vazia!!\n";
	else
		cout << "Lista NAO vazia!!\n";
	
	l.mostrar();
	
	if(l.existe(10))
		cout << "\nO elemento 10 existe na lista!!\n";
	else
		cout << "\nO elemento 10 NAO existe na lista!!\n";
	
	l.inserir_final(10);
	l.inserir_final(20);
	l.inserir_final(30);
	l.inserir_final(40);
	l.inserir_inicio(50);
	
	l.mostrar();
	
	if(l.vazia())
		cout << "Lista vazia!!\n";
	else
		cout << "Lista NAO vazia!!\n";
	
	//teste do metodo existe na lista, onde passamos como parametro o numero 10 que sera checado dentro da lista
	if(l.existe(10))
		cout << "\nO elemento 10 existe na lista!!\n";
	else
		cout << "\nO elemento 10 NAO existe na lista!!\n";
	
	//teste do metodo removerFinal
	cout << "\nO Removendo na lista!!\n";
	l.removerFinal();

    cout << "\nO Removendo na lista!!\n";
	//teste do metodo removerInicio
	l.removerInicio();

    //	teste de demonstracao dos dados da lista
	l.mostrar();
	
	//	teste de contagem dos dados da lista
	cout << "Tamanho da lista: " << l.tamanho() << endl;
	
	//Fiñalização dos testes na LISTA
	cout << "****************FINALIZANDO OS TESTES NA LISTA \n";
	
	
	cout << "****************TESTANDO PILHA \n";
	// pilha
	
	
	if(p.vazia())
		cout << "Pilha vazia!!\n";
	else
		cout << "Pilha NAO vazia!!\n";
	
	
	
	p.Pop(10)	;
	cout << "Insere 10 na Pilha!!\n";
	p.Pop(20)	;
	cout << "Insere 20 na Pilha!!\n";
	p.Pop(30)	;
	cout << "Insere 30 na Pilha!!\n";
    p.Pop(50)	;
	cout << "Insere 50 na Pilha!!\n";
	
	cout << "Mostrando topo da Pilha!!\n";
	p.Topo();
	
	cout << "Remove Topo da pilha!!\n";
	p.Push();
		
	cout << "Mostrando topo da Pilha!!\n";
	p.Topo();
	

    cout << "****************Final do teste de  PILHA \n";


    cout << "****************TESTANDO Fila \n";
		
	if(f.vazia())
		cout << "Fila vazia!!\n";
	else
		cout << "Fila NAO vazia!!\n";
	
	
	
	f.Pop(10)	;
	cout << "Insere 10 na Fila!!\n";
	f.Pop(20)	;
	cout << "Insere 20 na Fila!!\n";
	f.Pop(30)	;
	cout << "Insere 30 na Fila!!\n";
    f.Pop(50)	;
	cout << "Insere 50 na Fila!!\n";
	
	cout << "Mostrando primeiro da Fila!!\n";
	f.PrimeiroFila();
	
	cout << "Remove primeiro da Fila!!\n";
	f.Push();
		
	cout << "Mostrando primeiro da Fila!!\n";
	f.PrimeiroFila();	
	
		
	
	return 0;
}
